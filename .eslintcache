[{"/home/richen/Development/FullStack-Open-2020-Part3/src/index.js":"1","/home/richen/Development/FullStack-Open-2020-Part3/src/App.js":"2","/home/richen/Development/FullStack-Open-2020-Part3/src/services/persons.js":"3"},{"size":197,"mtime":1608406248962,"results":"4","hashOfConfig":"5"},{"size":5539,"mtime":1608606538106,"results":"6","hashOfConfig":"5"},{"size":691,"mtime":1608605046184,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"zlx5uu",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/richen/Development/FullStack-Open-2020-Part3/src/index.js",[],["16","17"],"/home/richen/Development/FullStack-Open-2020-Part3/src/App.js",["18"],"import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\nimport \"./index.css\";\nimport { serialize } from \"serialize-javascript\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nconst Filter = ({ search, handleSearchChange }) => {\n  return (\n    <form>\n      <div>\n        Search People:\n        <input value={search} onChange={handleSearchChange} />\n      </div>\n    </form>\n  );\n};\n\nconst PersonForm = ({\n  addPerson,\n  newName,\n  handleNameChange,\n  newNumber,\n  handleNumberChange,\n}) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        name: <input value={newName} onChange={handleNameChange} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\nconst Persons = ({ persons, search, showAll, handlePersonDelete }) => {\n  const peopleToShow = showAll\n    ? persons\n    : persons.filter(\n        (people) =>\n          (people.name.toLowerCase().includes(search.toLowerCase()) ||\n            people.number.toString().includes(search)) === true\n      );\n  return (\n    <>\n      {peopleToShow.map((person) => (\n        <div key={person.name}>\n          {person.name}: {person.number}\n          <button onClick={() => handlePersonDelete(person)}>delete</button>\n        </div>\n      ))}\n    </>\n  );\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [search, setSearch] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then((response) => {\n      setPersons(response);\n    });\n  }, []);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n    if (persons.some((person) => person.name === personObject.name)) {\n      const personToUpdate = persons.find(\n        (person) => person.name === personObject.name\n      );\n      if (\n        window.confirm(\n          `Person ${newName}: \\n already exists, replace old number with new one?`\n        )\n      ) {\n        personService\n          .update(personToUpdate.id, personObject)\n          .then((response) => {\n            const newPersons = [...persons];\n            newPersons[persons.indexOf(personToUpdate)] = response;\n            setPersons(newPersons);\n            setNewNumber(\"\");\n            setNewNumber(\"\");\n\n            setErrorMessage(`${personToUpdate.name} information updated...`);\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 5000);\n          })\n          .catch((error) => {\n            /* Handler for multi client\n            alert(`${personToUpdate.name} already got deleted in the server`);\n            const personsUpdated = persons.filter(\n              (person) => person.id !== personToUpdate.id\n            );\n            setPersons(personsUpdated); */\n            setErrorMessage(`${JSON.stringify(error.response.data.error)} `);\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 5000);\n            setNewName(\"\");\n            setNewNumber(\"\");\n          });\n      }\n      return;\n    }\n\n    personService\n      .create(personObject)\n      .then((response) => {\n        setPersons(persons.concat(response));\n        setNewName(\"\");\n        setNewNumber(\"\");\n        setErrorMessage(`${response.name} added!`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        return;\n      })\n      .catch((error) => {\n        //because error is a response from our server, we don't need to worry about the security flaw with JSON.stringify()\n        //still a security risk\n        console.log(error.response.data.error);\n        const err = JSON.stringify(error.response.data.error);\n        setErrorMessage(`${err}`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n    return;\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearchChange = (event) => {\n    if (search === \"\") {\n      setShowAll(true);\n      setSearch(event.target.value);\n    }\n    setShowAll(false);\n    setSearch(event.target.value);\n  };\n\n  const handlePersonDelete = (person) => {\n    if (window.confirm(`Do you really want to delete ${person.name}?`)) {\n      personService\n        .deletePerson(person.id)\n        .then((response) => {\n          return response;\n        })\n        .then((response) => {\n          personService.getAll().then((response) => {\n            setPersons(response);\n          });\n        })\n        .catch((err) => console.log(err));\n      return;\n    }\n    return;\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <Filter {...{ search, handleSearchChange }} />\n      <h2>Add a New Person</h2>\n      <PersonForm\n        {...{\n          addPerson,\n          newName,\n          handleNameChange,\n          newNumber,\n          handleNumberChange,\n        }}\n      />\n      <h2>Numbers</h2>\n      <Persons {...{ persons, search, showAll, handlePersonDelete }} />\n    </div>\n  );\n};\n\nexport default App;\n","/home/richen/Development/FullStack-Open-2020-Part3/src/services/persons.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":4,"column":10,"nodeType":"25","messageId":"26","endLine":4,"endColumn":19},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'serialize' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]